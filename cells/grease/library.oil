#! /usr/bin/env oil
#|
#| Grease ~ A lib to thicken the oil shell

module grease.oil || return 0

# allow json values
if ! test -v True { const True, False, None = true, false, null }

# add substituted deps to path
setvar deps = '@deps@'
if (len(deps) > 6) { export PATH="$deps:$PATH" }

# alias doas to sudo if not found
if ! boolstatus which doas &>/dev/null {
  proc doas(@argv) { sudo @argv }
}

proc ls-procs() { pp proc | cut -f1 }
proc dt-stamp() { date --utc +%Y%m%d%H%M%S }
proc uuid2dec(item) { echo $((16#${item//-/})) }
proc wakelock(@argv) { systemd-inhibit --what=idle:sleep:handle-lid-switch @argv }

proc paramize(:result, @params) {
  ### override and set default options
  jo @params | json read :parsed
  setref result = parsed
}

proc nsidgen(seed=null, base='@oid') {
  ### generate namespaced uuids
  if (not seed) { read --line :seed }
  uuidgen --sha1 --namespace $base --name $seed
}

proc gpgfprt(iden=USER) {
  ### return any matching gnupg keyids
  try gpg --list-options show-only-fpr-mbox \
    --list-keys $iden 2>/dev/null || return 1
}

proc gpgeval(@argv) {
  ### script-able gnupg interface
  var base_cmd = %(gpg --with-colons --command-fd 0 --status-fd 2)
  eval $join(base_cmd ++ argv, ' ')
}

proc round-bytes(number, asFloat=false) {
  ### simplify values of memory units
  var pattr = '%.2f' if (asFloat) else '%0.f'
  numfmt --format=$pattr --round=nearest \
    --from=iec --to=iec $number
}

proc base20(number=null) {
  ### convert between decimal and base20
  const BASE20_CHARS = %( b c d f g h j k l m n p q r s t v w x z )
  if (not number) { read --line :number }
  if (number ~ / alpha /) { 
    setvar number = $(echo $number | tr '[:upper:]' '[:lower:]' |\
      tr 'bcdfghjklmnpqrstvwxz' '0123456789abcdefghijk')
    echo $((20#$number)) 
  } elif (number ~ / digit /) { 
    var result = []
    var chrset = @( echo "obase=20;${number}" | bc | tr -d '\\\n' )
    for i in @chrset { append :result ${BASE20_CHARS[$((10#$i))]} }
    write --sep '' @result
  } 
}

proc base36(number=null) {
  ### convert between decimal and base36
  const BASE36_CHARS = %( {0..9} {a..z} )
  if (not number) { read --line :number }
  if (number ~ / alpha /) { echo $((36#$number)) 
  } elif (number ~ / digit /) { 
    var result = []
    var chrset = @( echo "obase=36;${number}" | bc | tr -d '\\\n' )
    for i in @chrset { append :result ${BASE36_CHARS[$((10#$i))]} }
    write --sep '' @result
  } 
}

proc rand-num(upper=100, lower=1) {
  ### random number between upper and lower bounds
  shuf -i$lower-$upper -n1
}

proc rand-itm(@items) {
  ### random item from a list
  var num = len(items)
  var idx = $(rand-num $num) - 1
  write $[items[idx]]
}

proc str-mesure(str=null) {
  ### calc dims of text block
  if (not str) { read --line :str }
  echo $str | wc --max-line-length
  echo $str | wc --lines
}

proc str-repeat(count, chars) {
  ### dup string some number of times
  printf %$[count]s | tr ' ' $chars
}

proc str-strip(rgx, str=null) {
  ### remove matches from string
  if (not str) { read --line :str }
  echo $str | rg $rgx -r ''
}

proc str-squee(chr, str=null) {
  ### squeeze repeating characters into one
  if (not str) { read --line :str }
  echo $str | tr -s $chr
}

proc str-upper(str=null) {
  if (not str) { read --line :str }
  echo $str | tr '[:lower:]' '[:upper:]'
}

proc str-lower(str=null) {
  if (not str) { read --line :str }
  echo $str | tr '[:upper:]' '[:lower:]'
}

proc read-nix-file(:out, targ, @args) {
  ### read nix file into variable
  nix eval --json --file $targ @args 2>/dev/null | json read :res
  setref out = res
}

proc read-nix-expr(:out, code, @args) {
  ### read nix expr into variable
  nix eval --json --expr $code @args 2>/dev/null | json read :res
  setref out = res
}

#|
#|